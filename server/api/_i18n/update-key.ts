import { defineEventHandler, readBody } from "h3";
import { useRuntimeConfig, useNitroApp } from "#imports";

export default defineEventHandler(async (event) => {
  try {
    const body = await readBody(event);
    const config = useRuntimeConfig();
    const defaultModule = config.i18nModule;

    // Use destructuring with default from config
    const { locale, key, value, module = defaultModule } = body;

    const apiSecret = config.apiSecret;
    const apiClient = config.apiClient;

    if (!locale || !key) {
      return { success: false, error: "Missing locale or key" };
    }

    if (!apiSecret) {
      console.error("API secret is not configured");
      return { success: false, error: "API configuration missing" };
    }

    // Prepare translation data in the dictionary-based format
    const translationData = {
      key,
      module,
      locale,
      description: "Auto-generated by Stufio Admin"
    }

    if (process.client) {
      console.error("This API should not be called from the client");
      return { success: false, error: "Invalid request source" };
    } else {
      const { $api } = useNitroApp();

      try {
        // Use $api and handle errors with try/catch instead of checking error.value
        const result = await $api("/api/v1/internal/i18n/translations", {
          baseURL: config.apiInternalBaseURL,
          method: "POST",
          body: translationData,
          headers: {
            "Content-Type": "application/json",
            "X-API-Secret": apiSecret,
            "X-API-Client": apiClient,
          },
        });

        return {
          success: true,
          locale,
          key,
          apiResponse: result,
        };
      } catch (apiError: any) {
        if (apiError.status === 400) {
          return { success: false, error: "Already created" };
        }
        // Handle API errors directly from the caught exception
        const errorMessage = apiError.data?.detail || apiError.message || "API request failed";

        console.error("API error:", apiError);
        console.error("translationData", translationData);
        
        return { success: false, error: errorMessage };
      }
    }
  } catch (err: any) {
    console.error("Error updating translations:", err);
    return { success: false, error: err.message };
  }
});